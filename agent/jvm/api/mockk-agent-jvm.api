public final class io/mockk/ValueClassSupportKt {
	public static final fun boxedClass (Ljava/lang/Object;)Lkotlin/reflect/KClass;
	public static final fun boxedClass (Lkotlin/reflect/KClass;)Lkotlin/reflect/KClass;
	public static final fun boxedValue (Ljava/lang/Object;)Ljava/lang/Object;
}

public class io/mockk/proxy/jvm/ClassLoadingStrategyChooser {
	public fun <init> ()V
	public static fun chooseClassLoadingStrategy (Ljava/lang/Class;)Lnet/bytebuddy/dynamic/loading/ClassLoadingStrategy;
}

public final class io/mockk/proxy/jvm/JvmMockKAgentFactory : io/mockk/proxy/MockKAgentFactory {
	public fun <init> ()V
	public fun getConstructorProxyMaker ()Lio/mockk/proxy/MockKConstructorProxyMaker;
	public synthetic fun getInstantiator ()Lio/mockk/proxy/MockKInstantiatior;
	public fun getInstantiator ()Lio/mockk/proxy/jvm/ObjenesisInstantiator;
	public fun getProxyMaker ()Lio/mockk/proxy/MockKProxyMaker;
	public fun getStaticProxyMaker ()Lio/mockk/proxy/MockKStaticProxyMaker;
	public fun init (Lio/mockk/proxy/MockKAgentLogFactory;)V
}

public final class io/mockk/proxy/jvm/ObjenesisInstantiator : io/mockk/proxy/MockKInstantiatior {
	public static final field Companion Lio/mockk/proxy/jvm/ObjenesisInstantiator$Companion;
	public fun <init> (Lio/mockk/proxy/MockKAgentLogger;Lnet/bytebuddy/ByteBuddy;)V
	public fun instance (Ljava/lang/Class;)Ljava/lang/Object;
}

public final class io/mockk/proxy/jvm/ObjenesisInstantiator$Companion {
}

public class io/mockk/proxy/jvm/advice/jvm/JvmMockKConstructorProxyAdvice {
	public static final field Companion Lio/mockk/proxy/jvm/advice/BaseAdvice$Companion;
	public fun <init> (Lio/mockk/proxy/jvm/advice/jvm/MockHandlerMap;)V
}

public class io/mockk/proxy/jvm/advice/jvm/JvmMockKHashMapStaticProxyAdvice {
	public static final field Companion Lio/mockk/proxy/jvm/advice/BaseAdvice$Companion;
	public fun <init> (Lio/mockk/proxy/jvm/advice/jvm/MockHandlerMap;)V
}

public class io/mockk/proxy/jvm/advice/jvm/JvmMockKProxyAdvice {
	public static final field Companion Lio/mockk/proxy/jvm/advice/BaseAdvice$Companion;
	public fun <init> (Lio/mockk/proxy/jvm/advice/jvm/MockHandlerMap;)V
}

public class io/mockk/proxy/jvm/advice/jvm/JvmMockKProxyInterceptor {
	public static final field Companion Lio/mockk/proxy/jvm/advice/BaseAdvice$Companion;
	public fun <init> (Lio/mockk/proxy/jvm/advice/jvm/MockHandlerMap;)V
	public static fun intercept (JLjava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
	public static fun interceptNoSuper (JLjava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
}

public class io/mockk/proxy/jvm/advice/jvm/JvmMockKStaticProxyAdvice {
	public static final field Companion Lio/mockk/proxy/jvm/advice/BaseAdvice$Companion;
	public fun <init> (Lio/mockk/proxy/jvm/advice/jvm/MockHandlerMap;)V
}

public abstract interface class io/mockk/proxy/jvm/advice/jvm/MockHandlerMap : java/util/Map, kotlin/jvm/internal/markers/KMutableMap {
	public static final field Companion Lio/mockk/proxy/jvm/advice/jvm/MockHandlerMap$Companion;
	public abstract fun isMock (Ljava/lang/Object;)Z
}

public final class io/mockk/proxy/jvm/advice/jvm/MockHandlerMap$Companion {
	public final fun create (Z)Lio/mockk/proxy/jvm/advice/jvm/MockHandlerMap;
}

public final class io/mockk/proxy/jvm/advice/jvm/SynchronizedMockHandlersMap : io/mockk/proxy/jvm/advice/jvm/MockHandlerMap, java/util/Map, kotlin/jvm/internal/markers/KMutableMap {
	public fun <init> ()V
	public fun <init> (Ljava/util/Map;)V
	public fun clear ()V
	public fun containsKey (Ljava/lang/Object;)Z
	public fun containsValue (Lio/mockk/proxy/MockKInvocationHandler;)Z
	public final fun containsValue (Ljava/lang/Object;)Z
	public final fun entrySet ()Ljava/util/Set;
	public fun get (Ljava/lang/Object;)Lio/mockk/proxy/MockKInvocationHandler;
	public synthetic fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getEntries ()Ljava/util/Set;
	public fun getKeys ()Ljava/util/Set;
	public fun getSize ()I
	public fun getValues ()Ljava/util/Collection;
	public fun isEmpty ()Z
	public fun isMock (Ljava/lang/Object;)Z
	public final fun keySet ()Ljava/util/Set;
	public fun put (Ljava/lang/Object;Lio/mockk/proxy/MockKInvocationHandler;)Lio/mockk/proxy/MockKInvocationHandler;
	public synthetic fun put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public fun putAll (Ljava/util/Map;)V
	public fun remove (Ljava/lang/Object;)Lio/mockk/proxy/MockKInvocationHandler;
	public synthetic fun remove (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun size ()I
	public final fun values ()Ljava/util/Collection;
}

public final class io/mockk/proxy/jvm/advice/jvm/WeakMockHandlersMap : io/mockk/proxy/jvm/advice/jvm/MockHandlerMap, java/util/Map, kotlin/jvm/internal/markers/KMutableMap {
	public fun <init> ()V
	public fun <init> (Lio/mockk/proxy/jvm/dispatcher/JvmMockKWeakMap;)V
	public fun clear ()V
	public fun containsKey (Ljava/lang/Object;)Z
	public fun containsValue (Lio/mockk/proxy/MockKInvocationHandler;)Z
	public final fun containsValue (Ljava/lang/Object;)Z
	public final fun entrySet ()Ljava/util/Set;
	public fun get (Ljava/lang/Object;)Lio/mockk/proxy/MockKInvocationHandler;
	public synthetic fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getEntries ()Ljava/util/Set;
	public fun getKeys ()Ljava/util/Set;
	public fun getSize ()I
	public fun getValues ()Ljava/util/Collection;
	public fun isEmpty ()Z
	public fun isMock (Ljava/lang/Object;)Z
	public final fun keySet ()Ljava/util/Set;
	public fun put (Ljava/lang/Object;Lio/mockk/proxy/MockKInvocationHandler;)Lio/mockk/proxy/MockKInvocationHandler;
	public synthetic fun put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public fun putAll (Ljava/util/Map;)V
	public fun remove (Ljava/lang/Object;)Lio/mockk/proxy/MockKInvocationHandler;
	public synthetic fun remove (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun size ()I
	public final fun values ()Ljava/util/Collection;
}

public abstract class io/mockk/proxy/jvm/dispatcher/JvmMockKDispatcher {
	public fun <init> ()V
	public abstract fun constructorDone (Ljava/lang/Object;[Ljava/lang/Object;)V
	public static fun get (JLjava/lang/Object;)Lio/mockk/proxy/jvm/dispatcher/JvmMockKDispatcher;
	public abstract fun handle (Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
	public abstract fun handler (Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/util/concurrent/Callable;
	public abstract fun isMock (Ljava/lang/Object;)Z
	public static fun set (JLio/mockk/proxy/jvm/dispatcher/JvmMockKDispatcher;)V
}

public class io/mockk/proxy/jvm/dispatcher/JvmMockKWeakMap : java/util/Map {
	public fun <init> ()V
	public fun clear ()V
	public fun containsKey (Ljava/lang/Object;)Z
	public fun containsValue (Ljava/lang/Object;)Z
	public fun entrySet ()Ljava/util/Set;
	public fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getTarget ()Ljava/util/Map;
	public fun isEmpty ()Z
	public fun keySet ()Ljava/util/Set;
	public fun put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public fun putAll (Ljava/util/Map;)V
	public fun remove (Ljava/lang/Object;)Ljava/lang/Object;
	public fun size ()I
	public fun values ()Ljava/util/Collection;
}

